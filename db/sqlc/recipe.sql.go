// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipe.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    name,
    categories,
    description,
    prepare_method,
    ingredients,
    rating,
    preparation_time
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, categories, description, prepare_method, ingredients, rating, preparation_time, created_at
`

type CreateRecipeParams struct {
	Name            string
	Categories      []string
	Description     string
	PrepareMethod   string
	Ingredients     []string
	Rating          sql.NullInt32
	PreparationTime time.Time
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		pq.Array(arg.Categories),
		arg.Description,
		arg.PrepareMethod,
		pq.Array(arg.Ingredients),
		arg.Rating,
		arg.PreparationTime,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Categories),
		&i.Description,
		&i.PrepareMethod,
		pq.Array(&i.Ingredients),
		&i.Rating,
		&i.PreparationTime,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getRecipeById = `-- name: GetRecipeById :one
SELECT id, name, categories, description, prepare_method, ingredients, rating, preparation_time, created_at FROM recipes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipeById(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeById, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Categories),
		&i.Description,
		&i.PrepareMethod,
		pq.Array(&i.Ingredients),
		&i.Rating,
		&i.PreparationTime,
		&i.CreatedAt,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, categories, description, prepare_method, ingredients, rating, preparation_time, created_at FROM recipes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRecipesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRecipes(ctx context.Context, arg ListRecipesParams) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			pq.Array(&i.Categories),
			&i.Description,
			&i.PrepareMethod,
			pq.Array(&i.Ingredients),
			&i.Rating,
			&i.PreparationTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes
SET
    name = $2,
    categories = $3,
    description = $4,
    prepare_method = $5,
    ingredients = $6,
    rating = $7,
    preparation_time = $8
WHERE id = $1
RETURNING id, name, categories, description, prepare_method, ingredients, rating, preparation_time, created_at
`

type UpdateRecipeParams struct {
	ID              int64
	Name            string
	Categories      []string
	Description     string
	PrepareMethod   string
	Ingredients     []string
	Rating          sql.NullInt32
	PreparationTime time.Time
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe,
		arg.ID,
		arg.Name,
		pq.Array(arg.Categories),
		arg.Description,
		arg.PrepareMethod,
		pq.Array(arg.Ingredients),
		arg.Rating,
		arg.PreparationTime,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Categories),
		&i.Description,
		&i.PrepareMethod,
		pq.Array(&i.Ingredients),
		&i.Rating,
		&i.PreparationTime,
		&i.CreatedAt,
	)
	return i, err
}
